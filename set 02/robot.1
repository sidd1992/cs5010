#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2605 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 257
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e robot) (read-case-sensitive #t) (teachpacks ((lib \"image.rkt\" \""
 #"teachpack\" \"2htdp\"))) (htdp-settings #(#t constructor repeating-d"
 #"ecimal #f #t none #f ((lib \"image.rkt\" \"teachpack\" \"2htdp\"))))"
 #")"
) 0 0 4 29 1 #"\n"
0 0 17 3 25 #";; template for direction"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-robot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 10 #"robot-left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"robot-right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(provide robot-where)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 13 #"robot-forward"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(check-location \"02\" \"robot.rkt\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"UP"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"DOWN"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"ROBOT-RIGHT-EDGE"
0 0 24 3 1 #" "
0 0 21 3 3 #"185"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"ROBOT-BOTTOM-EDGE"
0 0 24 3 1 #" "
0 0 21 3 3 #"385"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; data definitions for the robot"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"robot"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; An robot is (make-robot Coordinate Coordinate Direction)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Interp:"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; x is the x coordinate of the robot's position"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; y is the y coordinate of the robot's postion"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Direction is the direction robot's face is facing"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;Template"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; robot-fn : Robot -> ??"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"robot-fn"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; Robot direction can be one of the following:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; - \"right\" (robot is facing right) "
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";           (a robot moving \"right\" would increase it\342\200\231s"
 #" x position.)"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; - \"left\"  (robot is facing left)  "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";           (a robot moving \"left\" would decrease it\342\200\231s "
 #"x position.)"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; - \"up\"    (robot is facing up)    "
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";           (a robot moving \"up\" would decrease it\342\200\231s y "
 #"position.)"
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #"; - \"down\"  (robot is facing down) "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";           (a robot moving \"down\" would increase it\342\200\231s "
 #"y position.)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; TEMPLATE"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; direction-fn : Direction -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define (direction-fn dir)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    [(right? dir) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";    [(left? dir) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";    [(up? dir) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";    [(right? dir) ...]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; initial-robot : Coordinate Coordinate -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Returns a Robot located at (x,y), facing up."
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Examples and Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"initial-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 33 #"\"robot like r but with facing up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;;; STRATEGY: function composition  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"initial-robot"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; up?: Robot -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; whether the robot is facing the \"up\" direction."
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"up?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 33 #"\"true because robot is facing up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;; STRATEGY: Data Decomposition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;down?: Robot -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; whether the robot is facing the \"down\" direction."
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;EXAMPLES:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"down?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 35 #"\"true because robot is facing down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;; STRATEGY: Data Decompistion"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;right?: Robot -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; whether the robot is facing the \"right\" direction."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;EXAMPLES:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"right?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 36 #"\"true because robot is facing right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;; STRATEGY: Data Decompistion"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;left?: Robot -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; whether the robot is facing the \"left\" direction."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;EXAMPLES:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"left?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 35 #"\"true because robot is facing left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;; STRATEGY: Data Decompistion"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; robot-left : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Returns a Robot like r, but turned 90 degrees"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;         left."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;Tests and Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-left"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-left"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-left"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-left"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 51 #"\"a Robot like r, but turned either 90 degrees left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 52 #"\"a Robot like r, but turned either 90 degrees left.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 52 #"\"a Robot like r, but turned either 90 degrees left.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; strategy : data decomposition on r : Robot"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"robot-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 5 #")   ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; robot-right : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; a robot like the original, but turned 90 degrees right."
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Examples and tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 53 #"\"a Robot like r, but turned either 90 degrees right.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"robot-right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 53 #"\"a Robot like r, but turned either 90 degrees right.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"robot-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 6 #")    ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; robot-goup : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; a robot with moved up according to the required conditions."
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Examples and tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-goup"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 14 3 2 #"UP"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 57
#"\"a Robot moved up with given distance or stopped at wall "
0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"    if present position and distance would make it move outside canv"
 #"as\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"robot-goup"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 14 3 2 #"UP"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 57
#"\"a Robot moved up with given distance or stopped at wall "
0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"    if present position and distance would make it move outside canv"
 #"as\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"robot-goup"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; robot-godown : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; RETURNS: a robot moved down according to the required conditions."
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Examples and tests:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(begin-for-test"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";(robot-godown (make-robot 50 500 \"down\") 100) (make-robot 50 600 "
 #"\"down\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#"; \"a Robot moved down with given distance or stopped at wall "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;    if present position and distance would make it move outside ca"
 #"nvas\""
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";  (robot-godown (make-robot 50 300 \"down\") 1000) (make-robot 50 3"
 #"85 \"down\"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#"; \"a Robot moved down with given distance or stopped at wall "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   if present position and distance would make it move outside canv"
 #"as\" "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"robot-godown"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 17 #"ROBOT-BOTTOM-EDGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"robot-increase-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 24 #"move/stop-at-bottom-wall"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; robot-goleft : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURNS: a robot moving towards left with the required conditions"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Examples and tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"robot-goleft"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 4 #"-100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 4 #"-110"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 59
#"\"a Robot moved left with given distance or stopped at wall "
0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"    if present position and distance would make it move outside canv"
 #"as\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"robot-goleft"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #")("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 59
#"\"a Robot moved left with given distance or stopped at wall "
0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"    if present position and distance would make it move outside canv"
 #"as\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"robot-goleft"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"robot-decrease-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 22 #"move/stop-at-left-wall"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 5 #")])) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; CORRECT"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"move/stop-at-bottom-wall"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"DOWN"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"385"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"move/stop-at-bottom-wall"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"DOWN"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"385"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; strategy : CORRECT    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"move/stop-at-bottom-wall"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #")("
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 2 #") "
0 0 14 3 17 #"ROBOT-BOTTOM-EDGE"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"move/stop-at-left-wall"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"robot-increase-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"robot-decrease-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; robot-goright : Robot -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURNS a robot moving towards right with the required conditions"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Examples and tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-goright"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 60
#"\"a Robot moved right with given distance or stopped at wall "
0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"    if present position and distance would make it move outside canv"
 #"as\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-goright"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 2 #") "
0 0 14 3 16 #"ROBOT-RIGHT-EDGE"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; vertical : Robot PosInt -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Returns A robot with the updated y coordinate after covering "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; the required distance or being stopped at wall if distance "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; to cover would make it outside canvas."
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Examples and tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"robot-vertical"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 2 #"UP"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 5 #")   ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 47 #"\"robot being moved up with the given distance \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"robot-vertical"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"DOWN"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 48 #"\"robot being moved down with the given distance\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Design Strategy : CORRECT"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"robot-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 16 #"ROBOT-RIGHT-EDGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"robot-goup"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 16 #"ROBOT-RIGHT-EDGE"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"robot-godown"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-outside"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; horizontal : Robot PosInt -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Returns A robot with the updated x coordinate after covering "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; the required distance or being stopped at wall if distance "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; to cover would make it outside canvas."
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Examples and tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 16 #"robot-horizontal"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 3 #" ) "
0 0 21 3 2 #"50"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 48 #"\"robot being moved down with the given distance\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 16 #"robot-horizontal"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 3 #" ) "
0 0 21 3 2 #"50"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 48 #"\"robot being moved down with the given distance\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Design Strategy : Function Composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"robot-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 17 #"ROBOT-BOTTOM-EDGE"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 13 #"robot-goright"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 17 #"ROBOT-BOTTOM-EDGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 19 #"ROBOT-LEFT-TOP-EDGE"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"robot-goleft"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-outside"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; outside-room-position : Robot PosInt  -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Return : A robot (which is completely outside the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; moved after covering the required distance."
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Examples and tests            "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-outside"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 3 2 #")("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 1 #" "
0 0 21 3 3 #"-18"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 55 #"\"robot with new position after moved by distance 'dis'\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-outside"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #")("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"390"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 55 #"\"robot with new position after moved by distance 'dis'\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Design strategy : CORRECT"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-outside"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 3 #"dis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-robot"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"robot-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 2 #") "
0 0 14 3 3 #"dis"
0 0 24 3 3 #") ("
0 0 14 3 7 #"robot-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 15 #"robot-direction"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; robot-forward : Robot NonNegReal -> Robot"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Returns a Robot like r, but moved forward by d pixels.  "
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; If the robot is inside the room and moving would put any part of t"
 #"he"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; robot outside the room, the robot should stop at the wall that it'"
 #"s facing."
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Examples and Tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 34 #"\"robot moved up with 'd' distance\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 54 #"\"robot moved up with 'd' distance but stopped at wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #";  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 4 #")  ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 36 #"\"robot moved down with 'd' distance\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #") "
0 0 21 3 3 #"400"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"385"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 38 #"\"robot moved down but stopped at wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";  (check-equal? "
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";   (robot-forward (make-robot 100 100 \"down\") 285) (make-robot 10"
 #"0 385 \"down\"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";   (robot-forward (make-robot 10  100 \"down\") 400) (make-robot 10"
 #" 500 \"down\"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";   (robot-forward (make-robot 15  15 \"down\")  390) (make-robot 15"
 #" 405 \"down\"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";   (robot-forward (make-robot 100 14 \"down\")  50)  (make-robot 10"
 #"0 64 \"down\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 75
(
 #";  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 37 #"\"robot moved right with 'd' distance\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #")("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"185"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 39 #"\"robot moved right but stopped at wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 77
(
 #";(robot-forward (make-robot 100 100 \"right\") 85)(make-robot 185 10"
 #"0 \"right\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";(check-equal? "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 78
(
 #";(robot-forward (make-robot 200 100 \"right\") 85) (make-robot 285 1"
 #"00 \"right\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 77
(
 #";(robot-forward (make-robot 15 385 \"right\") 85) (make-robot 100 38"
 #"5 \"right\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 76
(
 #";(robot-forward (make-robot 0 200 \"right\") 85)  (make-robot 85 200"
 #" \"right\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 75
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 5 #")   ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 78
(
 #";(robot-forward (make-robot 100 100 \"left\") 100)  (make-robot 15 1"
 #"00 \"left\")) "
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #";(robot-forward (make-robot 100 100 \"left\") 150)  (make-robot 15 1"
 #"00 \"left\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 5 #")   ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #";(robot-forward (make-robot 185 100 \"left\") 100)  (make-robot 85 1"
 #"00 \"left\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #";(robot-forward (make-robot 15 100 \"left\") 20)    (make-robot -5 1"
 #"00 \"left\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 78
(
 #"; (robot-forward (make-robot 300 125 \"left\") 1000) (make-robot 15 "
 #"125 \"left\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 4 #"-500"
0 0 24 3 1 #" "
0 0 21 3 4 #"-725"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"make-robot"
0 0 24 3 1 #" "
0 0 21 3 4 #"-500"
0 0 24 3 1 #" "
0 0 21 3 4 #"-825"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Strategy: Function Composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"robot-forward"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"up?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 5 #"down?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 7 #"))    ("
0 0 14 3 14 #"robot-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 3 #") ("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"robot-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"robo"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
